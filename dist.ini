name    = JIRA-REST-Class
version = 0.01
author  = Packy Anderson <packy@cpan.org>
copyright_holder = Packy Anderson
license = Artistic_2_0
main_module = lib/JIRA/REST/Class.pm

[RewriteVersion::Transitional]
skip_version_provider = true
;[NextRelease]
[PodWeaver]
[@Git]

; choose files to include
[Git::GatherDir]    ; everything from git ls-files
exclude_filename = Makefile

[PruneCruft]        ; default stuff to skip
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too

; file modifications
[InsertCopyright]    ; add copyright at "# COPYRIGHT"

; generated files
[License]           ; boilerplate license
[Pod2Readme]        ; from Pod (runs after PodWeaver)

; t tests
[Test::ReportPrereqs]   ; show prereqs in automated test output

; xt tests
[Test::MinimumVersion]  ; xt/release/minimum-version.t
max_target_perl = 5.010 ; do not use syntax/features past 5.10
[Test::PodSpelling]     ; xt/author/pod-spell.t
stopword = TODO
stopword = Atlassian
stopword = ScriptRunner
stopword = aggregateprogress
stopword = aggregatetimeestimate
stopword = aggregatetimeoriginalestimate
stopword = assigneeType
stopword = avatar
stopword = avatarUrls
stopword = completeDate
stopword = displayName
stopword = duedate
stopword = emailAddress
stopword = endDate
stopword = fieldtype
stopword = fixVersions
stopword = fromString
stopword = genericized
stopword = iconUrl
stopword = isAssigneeTypeValid
stopword = issueTypes
stopword = issuelinks
stopword = issuetype
stopword = jira
stopword = jql
stopword = lastViewed
stopword = maxResults
stopword = originalEstimate
stopword = originalEstimateSeconds
stopword = parentkey
stopword = projectId
stopword = rapidViewId
stopword = remainingEstimate
stopword = remainingEstimateSeconds
stopword = resolutiondate
stopword = sprintlist
stopword = startDate
stopword = timeSpent
stopword = timeSpentSeconds
stopword = timeestimate
stopword = timeoriginalestimate
stopword = timespent
stopword = timetracking
stopword = toString
stopword = updateAuthor
stopword = worklog
stopword = workratio


[Test::Perl::Critic]    ; xt/author/critic.t
[MetaTests]             ; xt/release/meta-yaml.t
[PodSyntaxTests]        ; xt/release/pod-syntax.t
[PodCoverageTests]      ; xt/release/pod-coverage.t
[Test::Portability]     ; xt/release/portability.t (of file name)
options = test_one_dot = 0
[Test::Version]         ; xt/release/test-version.t
[Test::Compile]         ; xt/author/00-compile.t
fake_home = 1           ; fakes $ENV{HOME} just in case
xt_mode = 1             ; make sure all files compile

; metadata
[AutoPrereqs]   ; find prereqs from code

[MinimumPerl]   ; determine minimum perl version

[Prereqs::AuthorDeps]   ; add authordeps as develop/requires
[MetaYAML]              ; generate META.yml (v1.4)
[MetaJSON]              ; generate META.json (v2)
[CPANFile]              ; generate cpanfile

; manifest (after all generated files)
[Manifest]          ; create MANIFEST

; before release

;[CopyFilesFromBuild]


[PromptIfStale]     ; check if our build tools are out of date
module = Dist::Zilla
module = Dist::Zilla::PluginBundle::DAGOLDEN
check_all_plugins = 1

[Git::CheckFor::CorrectBranch] ; ensure on master branch

[Git::Check]        ; ensure all files checked in
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = cpanfile

[CheckMetaResources]     ; ensure META has 'resources' data
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated

[RunExtraTests]   ; ensure xt/ tests pass

[TestRelease]     ; ensure t/ tests pass